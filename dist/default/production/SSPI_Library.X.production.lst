

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Jun 21 20:23:50 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 12/02/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  0088                     	;# 
   158  0089                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178  0008                     _PORTDbits	set	8
   179  0013                     _SSPBUF	set	19
   180  0007                     _PORTCbits	set	7
   181  0043                     _RD3	set	67
   182  0042                     _RD2	set	66
   183  0047                     _RD7	set	71
   184  0046                     _RD6	set	70
   185  0045                     _RD5	set	69
   186  0044                     _RD4	set	68
   187  00A4                     _CKP	set	164
   188  00A0                     _SSPM0	set	160
   189  00A1                     _SSPM1	set	161
   190  00A2                     _SSPM2	set	162
   191  00A3                     _SSPM3	set	163
   192  00A5                     _SSPEN	set	165
   193  0088                     _TRISD	set	136
   194  0087                     _TRISCbits	set	135
   195  04A6                     _CKE	set	1190
   196  04A7                     _SMP	set	1191
   197                           
   198                           	psect	strings
   199  0003                     __pstrings:
   200  0003                     stringtab:
   201  0003                     __stringtab:
   202  0003                     stringcode:	
   203                           ;	String table - string pointers are 1 byte each
   204                           
   205  0003                     stringdir:
   206  0003  3000               	movlw	high stringdir
   207  0004  008A               	movwf	10
   208  0005  0804               	movf	4,w
   209  0006  0A84               	incf	4,f
   210  0007  0782               	addwf	2,f
   211  0008                     __stringbase:
   212  0008  3400               	retlw	0
   213  0009                     __end_of__stringtab:
   214  0009                     STR_1:
   215  0009  3442               	retlw	66	;'B'
   216  000A  3469               	retlw	105	;'i'
   217  000B  3465               	retlw	101	;'e'
   218  000C  346E               	retlw	110	;'n'
   219  000D  3476               	retlw	118	;'v'
   220  000E  3465               	retlw	101	;'e'
   221  000F  346E               	retlw	110	;'n'
   222  0010  3469               	retlw	105	;'i'
   223  0011  3464               	retlw	100	;'d'
   224  0012  346F               	retlw	111	;'o'
   225  0013  3461               	retlw	97	;'a'
   226  0014  3400               	retlw	0
   227                           
   228                           	psect	cinit
   229  07F7                     start_initialization:	
   230                           ; #config settings
   231                           
   232  07F7                     __initialization:
   233                           
   234                           ; Clear objects allocated to COMMON
   235  07F7  01FC               	clrf	__pbssCOMMON& (0+127)
   236                           
   237                           ; Clear objects allocated to BANK0
   238  07F8  1283               	bcf	3,5	;RP0=0, select bank0
   239  07F9  1303               	bcf	3,6	;RP1=0, select bank0
   240  07FA  01A4               	clrf	__pbssBANK0& (0+127)
   241  07FB  01A5               	clrf	(__pbssBANK0+1)& (0+127)
   242  07FC                     end_of_initialization:	
   243                           ;End of C runtime variable initialization code
   244                           
   245  07FC                     __end_of__initialization:
   246  07FC  0183               	clrf	3
   247  07FD  120A  118A  2F80   	ljmp	_main	;jump to C main() function
   248                           
   249                           	psect	bssCOMMON
   250  007C                     __pbssCOMMON:
   251  007C                     _data:
   252  007C                     	ds	1
   253                           
   254                           	psect	bssBANK0
   255  0024                     __pbssBANK0:
   256  0024                     _lectura:
   257  0024                     	ds	2
   258                           
   259                           	psect	cstackCOMMON
   260  0070                     __pcstackCOMMON:
   261  0070                     ?_Sspi_Init:
   262  0070                     ??_Sspi_Init:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ?_SSpi_Clock_Source:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_Sspi_work_Cpol_Cpha:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ?_Lcd_Port:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ??_Lcd_Port:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_Lcd_Cmd:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     ?_Lcd_Init:	
   281                           ; 1 bytes @ 0x0
   282                           
   283  0070                     ?_Sram_write:	
   284                           ; 1 bytes @ 0x0
   285                           
   286  0070                     ?_main:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_sprintf:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_Lcd_Clear:	
   293                           ; 2 bytes @ 0x0
   294                           
   295  0070                     Lcd_Port@a:	
   296                           ; 2 bytes @ 0x0
   297                           
   298  0070                     SSpi_Clock_Source@value:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     Sspi_work_Cpol_Cpha@mode:	
   302                           ; 2 bytes @ 0x0
   303                           
   304  0070                     Sram_write@address:	
   305                           ; 2 bytes @ 0x0
   306                           
   307  0070                     sprintf@sp:	
   308                           ; 2 bytes @ 0x0
   309                           
   310                           
   311                           ; 2 bytes @ 0x0
   312  0070                     	ds	1
   313  0071                     ??_Lcd_Cmd:
   314                           
   315                           ; 1 bytes @ 0x1
   316  0071                     	ds	1
   317  0072                     ??_SSpi_Clock_Source:
   318  0072                     ??_Sspi_work_Cpol_Cpha:	
   319                           ; 1 bytes @ 0x2
   320                           
   321  0072                     ??_Sram_write:	
   322                           ; 1 bytes @ 0x2
   323                           
   324  0072                     sprintf@f:	
   325                           ; 1 bytes @ 0x2
   326                           
   327                           
   328                           ; 1 bytes @ 0x2
   329  0072                     	ds	1
   330  0073                     ??_sprintf:
   331  0073                     Lcd_Cmd@a:	
   332                           ; 1 bytes @ 0x3
   333                           
   334  0073                     Sram_write@dato:	
   335                           ; 1 bytes @ 0x3
   336                           
   337                           
   338                           ; 1 bytes @ 0x3
   339  0073                     	ds	1
   340  0074                     ??_Lcd_Clear:
   341  0074                     ?_Lcd_Set_Cursor:	
   342                           ; 1 bytes @ 0x4
   343                           
   344  0074                     ??_Lcd_Init:	
   345                           ; 1 bytes @ 0x4
   346                           
   347  0074                     Lcd_Set_Cursor@b:	
   348                           ; 1 bytes @ 0x4
   349                           
   350  0074                     sprintf@ap:	
   351                           ; 1 bytes @ 0x4
   352                           
   353                           
   354                           ; 1 bytes @ 0x4
   355  0074                     	ds	1
   356  0075                     ??_Lcd_Set_Cursor:
   357  0075                     sprintf@c:	
   358                           ; 1 bytes @ 0x5
   359                           
   360                           
   361                           ; 1 bytes @ 0x5
   362  0075                     	ds	2
   363  0077                     Lcd_Set_Cursor@a:
   364                           
   365                           ; 1 bytes @ 0x7
   366  0077                     	ds	1
   367  0078                     Lcd_Set_Cursor@z:
   368                           
   369                           ; 1 bytes @ 0x8
   370  0078                     	ds	1
   371  0079                     Lcd_Set_Cursor@y:
   372                           
   373                           ; 1 bytes @ 0x9
   374  0079                     	ds	1
   375  007A                     Lcd_Set_Cursor@temp:
   376                           
   377                           ; 1 bytes @ 0xA
   378  007A                     	ds	1
   379  007B                     ??_main:
   380                           
   381                           ; 1 bytes @ 0xB
   382  007B                     	ds	1
   383                           
   384                           	psect	cstackBANK0
   385  0020                     __pcstackBANK0:
   386  0020                     main@data:
   387                           
   388                           ; 2 bytes @ 0x0
   389  0020                     	ds	2
   390  0022                     main@i:
   391                           
   392                           ; 2 bytes @ 0x2
   393  0022                     	ds	2
   394                           
   395                           	psect	maintext
   396  0780                     __pmaintext:	
   397 ;;
   398 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   399 ;;
   400 ;; *************** function _main *****************
   401 ;; Defined at:
   402 ;;		line 71 in file "TestingSSPI.c"
   403 ;; Parameters:    Size  Location     Type
   404 ;;		None
   405 ;; Auto vars:     Size  Location     Type
   406 ;;  i               2    2[BANK0 ] int 
   407 ;;  data            2    0[BANK0 ] int 
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : B00/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   417 ;;      Params:         0       0       0       0       0
   418 ;;      Locals:         0       4       0       0       0
   419 ;;      Temps:          1       0       0       0       0
   420 ;;      Totals:         1       4       0       0       0
   421 ;;Total ram usage:        5 bytes
   422 ;; Hardware stack levels required when called: 3
   423 ;; This function calls:
   424 ;;		_Lcd_Clear
   425 ;;		_Lcd_Init
   426 ;;		_Lcd_Set_Cursor
   427 ;;		_SSpi_Clock_Source
   428 ;;		_Sram_write
   429 ;;		_Sspi_Init
   430 ;;		_Sspi_work_Cpol_Cpha
   431 ;;		_sprintf
   432 ;; This function is called by:
   433 ;;		Startup code after reset
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           
   438                           ;psect for function _main
   439  0780                     _main:
   440  0780                     l1081:	
   441                           ;incstack = 0
   442                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   443                           
   444                           
   445                           ;TestingSSPI.c: 72:     int data = 0;
   446  0780  1283               	bcf	3,5	;RP0=0, select bank0
   447  0781  1303               	bcf	3,6	;RP1=0, select bank0
   448  0782  01A0               	clrf	main@data
   449  0783  01A1               	clrf	main@data+1
   450  0784                     l1083:
   451                           
   452                           ;TestingSSPI.c: 73:     TRISCbits.TRISC0 = 0;
   453  0784  1683               	bsf	3,5	;RP0=1, select bank1
   454  0785  1303               	bcf	3,6	;RP1=0, select bank1
   455  0786  1007               	bcf	7,0	;volatile
   456  0787                     l1085:
   457                           
   458                           ;TestingSSPI.c: 74:     PORTCbits.RC0 = 1;
   459  0787  1283               	bcf	3,5	;RP0=0, select bank0
   460  0788  1303               	bcf	3,6	;RP1=0, select bank0
   461  0789  1407               	bsf	7,0	;volatile
   462                           
   463                           ;TestingSSPI.c: 75:      TRISD = 0x00;
   464  078A  1683               	bsf	3,5	;RP0=1, select bank1
   465  078B  1303               	bcf	3,6	;RP1=0, select bank1
   466  078C  0188               	clrf	8	;volatile
   467  078D                     l1087:
   468                           
   469                           ;TestingSSPI.c: 76:      PORTDbits.RD1 = 1;
   470  078D  1283               	bcf	3,5	;RP0=0, select bank0
   471  078E  1303               	bcf	3,6	;RP1=0, select bank0
   472  078F  1488               	bsf	8,1	;volatile
   473  0790                     l1089:
   474                           
   475                           ;TestingSSPI.c: 77:     Sspi_Init();
   476  0790  120A  118A  2597  120A  118A  	fcall	_Sspi_Init
   477  0795                     l1091:
   478                           
   479                           ;TestingSSPI.c: 78:     SSpi_Clock_Source(0x00);
   480  0795  3000               	movlw	0
   481  0796  00F0               	movwf	SSpi_Clock_Source@value
   482  0797  00F1               	movwf	SSpi_Clock_Source@value+1
   483  0798  120A  118A  26CF  120A  118A  	fcall	_SSpi_Clock_Source
   484  079D                     l1093:
   485                           
   486                           ;TestingSSPI.c: 79:     Sspi_work_Cpol_Cpha(0x00);
   487  079D  3000               	movlw	0
   488  079E  00F0               	movwf	Sspi_work_Cpol_Cpha@mode
   489  079F  00F1               	movwf	Sspi_work_Cpol_Cpha@mode+1
   490  07A0  120A  118A  2647  120A  118A  	fcall	_Sspi_work_Cpol_Cpha
   491  07A5                     l1095:
   492                           
   493                           ;TestingSSPI.c: 80:     Lcd_Init();
   494  07A5  120A  118A  2722  120A  118A  	fcall	_Lcd_Init
   495  07AA                     l1097:
   496                           
   497                           ;TestingSSPI.c: 81:       Lcd_Clear();
   498  07AA  120A  118A  25A0  120A  118A  	fcall	_Lcd_Clear
   499  07AF                     l1099:
   500                           
   501                           ;TestingSSPI.c: 82:        Lcd_Set_Cursor(1, 1);
   502  07AF  01F4               	clrf	Lcd_Set_Cursor@b
   503  07B0  0AF4               	incf	Lcd_Set_Cursor@b,f
   504  07B1  3001               	movlw	1
   505  07B2  120A  118A  267D  120A  118A  	fcall	_Lcd_Set_Cursor
   506  07B7                     l1101:
   507                           
   508                           ;TestingSSPI.c: 83:        sprintf(data, "Bienvenidoa");
   509  07B7  3000               	movlw	0
   510  07B8  00F0               	movwf	sprintf@sp
   511  07B9  00F1               	movwf	sprintf@sp+1
   512  07BA  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   513  07BB  00FB               	movwf	??_main
   514  07BC  087B               	movf	??_main,w
   515  07BD  00F2               	movwf	sprintf@f
   516  07BE  120A  118A  25E9  120A  118A  	fcall	_sprintf
   517  07C3                     l1103:
   518                           
   519                           ;TestingSSPI.c: 85:         Lcd_Clear();
   520  07C3  120A  118A  25A0  120A  118A  	fcall	_Lcd_Clear
   521  07C8                     l1105:
   522                           
   523                           ;TestingSSPI.c: 86:         for(int i = 0; i<=100; i++)
   524  07C8  1283               	bcf	3,5	;RP0=0, select bank0
   525  07C9  1303               	bcf	3,6	;RP1=0, select bank0
   526  07CA  01A2               	clrf	main@i
   527  07CB  01A3               	clrf	main@i+1
   528  07CC                     l1111:
   529                           
   530                           ;TestingSSPI.c: 87:         {;TestingSSPI.c: 88:             Sram_write(data, i);
   531  07CC  1283               	bcf	3,5	;RP0=0, select bank0
   532  07CD  1303               	bcf	3,6	;RP1=0, select bank0
   533  07CE  0823               	movf	main@i+1,w
   534  07CF  00F1               	movwf	Sram_write@address+1
   535  07D0  0822               	movf	main@i,w
   536  07D1  00F0               	movwf	Sram_write@address
   537  07D2  0820               	movf	main@data,w
   538  07D3  120A  118A  2616  120A  118A  	fcall	_Sram_write
   539  07D8                     l1113:
   540                           
   541                           ;TestingSSPI.c: 89:             data += 1;
   542  07D8  3001               	movlw	1
   543  07D9  1283               	bcf	3,5	;RP0=0, select bank0
   544  07DA  1303               	bcf	3,6	;RP1=0, select bank0
   545  07DB  07A0               	addwf	main@data,f
   546  07DC  1803               	skipnc
   547  07DD  0AA1               	incf	main@data+1,f
   548  07DE  3000               	movlw	0
   549  07DF  07A1               	addwf	main@data+1,f
   550  07E0                     l1115:
   551                           
   552                           ;TestingSSPI.c: 90:         }
   553  07E0  3001               	movlw	1
   554  07E1  07A2               	addwf	main@i,f
   555  07E2  1803               	skipnc
   556  07E3  0AA3               	incf	main@i+1,f
   557  07E4  3000               	movlw	0
   558  07E5  07A3               	addwf	main@i+1,f
   559  07E6                     l1117:
   560  07E6  0823               	movf	main@i+1,w
   561  07E7  3A80               	xorlw	128
   562  07E8  00FF               	movwf	btemp+1
   563  07E9  3080               	movlw	128
   564  07EA  027F               	subwf	btemp+1,w
   565  07EB  1D03               	skipz
   566  07EC  2FEF               	goto	u445
   567  07ED  3065               	movlw	101
   568  07EE  0222               	subwf	main@i,w
   569  07EF                     u445:
   570  07EF  1C03               	skipc
   571  07F0  2FF2               	goto	u441
   572  07F1  2FF3               	goto	u440
   573  07F2                     u441:
   574  07F2  2FCC               	goto	l1111
   575  07F3                     u440:
   576  07F3                     l124:	
   577                           ;TestingSSPI.c: 98:  while(1)
   578                           
   579  07F3  2FF3               	goto	l124
   580  07F4  120A  118A  2800   	ljmp	start
   581  07F7                     __end_of_main:
   582                           
   583                           	psect	text1
   584  05E9                     __ptext1:	
   585 ;; *************** function _sprintf *****************
   586 ;; Defined at:
   587 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
   588 ;; Parameters:    Size  Location     Type
   589 ;;  sp              2    0[COMMON] PTR unsigned char 
   590 ;;		 -> RAM(512), 
   591 ;;  f               1    2[COMMON] PTR const unsigned char 
   592 ;;		 -> STR_1(12), 
   593 ;; Auto vars:     Size  Location     Type
   594 ;;  tmpval          4    0        struct .
   595 ;;  cp              2    0        PTR const unsigned char 
   596 ;;  len             2    0        unsigned int 
   597 ;;  val             2    0        unsigned int 
   598 ;;  c               1    5[COMMON] unsigned char 
   599 ;;  ap              1    4[COMMON] PTR void [1]
   600 ;;		 -> ?_sprintf(2), 
   601 ;;  flag            1    0        unsigned char 
   602 ;;  prec            1    0        char 
   603 ;; Return value:  Size  Location     Type
   604 ;;                  2    0[COMMON] int 
   605 ;; Registers used:
   606 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   612 ;;      Params:         3       0       0       0       0
   613 ;;      Locals:         2       0       0       0       0
   614 ;;      Temps:          1       0       0       0       0
   615 ;;      Totals:         6       0       0       0       0
   616 ;;Total ram usage:        6 bytes
   617 ;; Hardware stack levels used: 2
   618 ;; This function calls:
   619 ;;		Nothing
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           
   626                           ;psect for function _sprintf
   627  05E9                     _sprintf:
   628  05E9                     l1057:	
   629                           ;incstack = 0
   630                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+pclath]
   631                           
   632                           
   633                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   634  05E9  3073               	movlw	(low ((?_sprintf| 0+3)))& (0+255)
   635  05EA  00F3               	movwf	??_sprintf
   636  05EB  0873               	movf	??_sprintf,w
   637  05EC  00F4               	movwf	sprintf@ap
   638                           
   639                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   640  05ED  2DFD               	goto	l1063
   641  05EE                     l1059:
   642                           
   643                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   644  05EE  0875               	movf	sprintf@c,w
   645  05EF  00F3               	movwf	??_sprintf
   646  05F0  0870               	movf	sprintf@sp,w
   647  05F1  0084               	movwf	4
   648  05F2  1783               	bsf	3,7
   649  05F3  1C71               	btfss	sprintf@sp+1,0
   650  05F4  1383               	bcf	3,7
   651  05F5  0873               	movf	??_sprintf,w
   652  05F6  0080               	movwf	0
   653  05F7                     l1061:
   654  05F7  3001               	movlw	1
   655  05F8  07F0               	addwf	sprintf@sp,f
   656  05F9  1803               	skipnc
   657  05FA  0AF1               	incf	sprintf@sp+1,f
   658  05FB  3000               	movlw	0
   659  05FC  07F1               	addwf	sprintf@sp+1,f
   660  05FD                     l1063:	
   661                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
   662                           
   663                           
   664                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   665  05FD  3001               	movlw	1
   666  05FE  07F2               	addwf	sprintf@f,f
   667  05FF  30FF               	movlw	-1
   668  0600  0772               	addwf	sprintf@f,w
   669  0601  0084               	movwf	4
   670  0602  120A  118A  2003  120A  118A  	fcall	stringdir
   671  0607  00F3               	movwf	??_sprintf
   672  0608  0873               	movf	??_sprintf,w
   673  0609  00F5               	movwf	sprintf@c
   674  060A  0875               	movf	sprintf@c,w
   675  060B  1D03               	btfss	3,2
   676  060C  2E0E               	goto	u421
   677  060D  2E0F               	goto	u420
   678  060E                     u421:
   679  060E  2DEE               	goto	l1059
   680  060F                     u420:
   681  060F                     l1065:
   682                           
   683                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   684  060F  0870               	movf	sprintf@sp,w
   685  0610  0084               	movwf	4
   686  0611  1783               	bsf	3,7
   687  0612  1C71               	btfss	sprintf@sp+1,0
   688  0613  1383               	bcf	3,7
   689  0614  0180               	clrf	0
   690  0615                     l217:
   691  0615  0008               	return
   692  0616                     __end_of_sprintf:
   693                           
   694                           	psect	text2
   695  0647                     __ptext2:	
   696 ;; *************** function _Sspi_work_Cpol_Cpha *****************
   697 ;; Defined at:
   698 ;;		line 124 in file "./SSPI.h"
   699 ;; Parameters:    Size  Location     Type
   700 ;;  mode            2    0[COMMON] int 
   701 ;; Auto vars:     Size  Location     Type
   702 ;;		None
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   712 ;;      Params:         2       0       0       0       0
   713 ;;      Locals:         0       0       0       0       0
   714 ;;      Temps:          0       0       0       0       0
   715 ;;      Totals:         2       0       0       0       0
   716 ;;Total ram usage:        2 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _Sspi_work_Cpol_Cpha
   727  0647                     _Sspi_work_Cpol_Cpha:
   728  0647                     l969:	
   729                           ;incstack = 0
   730                           ; Regs used in _Sspi_work_Cpol_Cpha: [wreg+status,2+status,0]
   731                           
   732                           
   733                           ;./SSPI.h: 124: void Sspi_work_Cpol_Cpha(int mode);./SSPI.h: 125: {;./SSPI.h: 126:     S
      +                          MP = 0;
   734  0647  1683               	bsf	3,5	;RP0=1, select bank1
   735  0648  1303               	bcf	3,6	;RP1=0, select bank1
   736  0649  1394               	bcf	20,7	;volatile
   737  064A                     l971:
   738                           
   739                           ;./SSPI.h: 127:     if(mode==0)
   740  064A  0870               	movf	Sspi_work_Cpol_Cpha@mode,w
   741  064B  0471               	iorwf	Sspi_work_Cpol_Cpha@mode+1,w
   742  064C  1D03               	btfss	3,2
   743  064D  2E4F               	goto	u331
   744  064E  2E50               	goto	u330
   745  064F                     u331:
   746  064F  2E56               	goto	l975
   747  0650                     u330:
   748  0650                     l973:
   749                           
   750                           ;./SSPI.h: 128:     {;./SSPI.h: 129:        CKP = 0;
   751  0650  1283               	bcf	3,5	;RP0=0, select bank0
   752  0651  1303               	bcf	3,6	;RP1=0, select bank0
   753  0652  1214               	bcf	20,4	;volatile
   754                           
   755                           ;./SSPI.h: 130:        CKE = 0;
   756  0653  1683               	bsf	3,5	;RP0=1, select bank1
   757  0654  1303               	bcf	3,6	;RP1=0, select bank1
   758  0655  1314               	bcf	20,6	;volatile
   759  0656                     l975:
   760                           
   761                           ;./SSPI.h: 133:        if(mode==1)
   762  0656  0370               	decf	Sspi_work_Cpol_Cpha@mode,w
   763  0657  0471               	iorwf	Sspi_work_Cpol_Cpha@mode+1,w
   764  0658  1D03               	btfss	3,2
   765  0659  2E5B               	goto	u341
   766  065A  2E5C               	goto	u340
   767  065B                     u341:
   768  065B  2E62               	goto	l979
   769  065C                     u340:
   770  065C                     l977:
   771                           
   772                           ;./SSPI.h: 134:     {;./SSPI.h: 135:        CKP = 1;
   773  065C  1283               	bcf	3,5	;RP0=0, select bank0
   774  065D  1303               	bcf	3,6	;RP1=0, select bank0
   775  065E  1614               	bsf	20,4	;volatile
   776                           
   777                           ;./SSPI.h: 136:        CKE = 0;
   778  065F  1683               	bsf	3,5	;RP0=1, select bank1
   779  0660  1303               	bcf	3,6	;RP1=0, select bank1
   780  0661  1314               	bcf	20,6	;volatile
   781  0662                     l979:
   782                           
   783                           ;./SSPI.h: 139:        if(mode==2)
   784  0662  3002               	movlw	2
   785  0663  0670               	xorwf	Sspi_work_Cpol_Cpha@mode,w
   786  0664  0471               	iorwf	Sspi_work_Cpol_Cpha@mode+1,w
   787  0665  1D03               	btfss	3,2
   788  0666  2E68               	goto	u351
   789  0667  2E69               	goto	u350
   790  0668                     u351:
   791  0668  2E6F               	goto	l983
   792  0669                     u350:
   793  0669                     l981:
   794                           
   795                           ;./SSPI.h: 140:     {;./SSPI.h: 141:        CKP = 0;
   796  0669  1283               	bcf	3,5	;RP0=0, select bank0
   797  066A  1303               	bcf	3,6	;RP1=0, select bank0
   798  066B  1214               	bcf	20,4	;volatile
   799                           
   800                           ;./SSPI.h: 142:        CKE = 1;
   801  066C  1683               	bsf	3,5	;RP0=1, select bank1
   802  066D  1303               	bcf	3,6	;RP1=0, select bank1
   803  066E  1714               	bsf	20,6	;volatile
   804  066F                     l983:
   805                           
   806                           ;./SSPI.h: 145:        if(mode==3)
   807  066F  3003               	movlw	3
   808  0670  0670               	xorwf	Sspi_work_Cpol_Cpha@mode,w
   809  0671  0471               	iorwf	Sspi_work_Cpol_Cpha@mode+1,w
   810  0672  1D03               	btfss	3,2
   811  0673  2E75               	goto	u361
   812  0674  2E76               	goto	u360
   813  0675                     u361:
   814  0675  2E7C               	goto	l66
   815  0676                     u360:
   816  0676                     l985:
   817                           
   818                           ;./SSPI.h: 146:     {;./SSPI.h: 147:        CKP = 1;
   819  0676  1283               	bcf	3,5	;RP0=0, select bank0
   820  0677  1303               	bcf	3,6	;RP1=0, select bank0
   821  0678  1614               	bsf	20,4	;volatile
   822                           
   823                           ;./SSPI.h: 148:        CKE = 1;
   824  0679  1683               	bsf	3,5	;RP0=1, select bank1
   825  067A  1303               	bcf	3,6	;RP1=0, select bank1
   826  067B  1714               	bsf	20,6	;volatile
   827  067C                     l66:
   828  067C  0008               	return
   829  067D                     __end_of_Sspi_work_Cpol_Cpha:
   830                           
   831                           	psect	text3
   832  0597                     __ptext3:	
   833 ;; *************** function _Sspi_Init *****************
   834 ;; Defined at:
   835 ;;		line 53 in file "./SSPI.h"
   836 ;; Parameters:    Size  Location     Type
   837 ;;		None
   838 ;; Auto vars:     Size  Location     Type
   839 ;;		None
   840 ;; Return value:  Size  Location     Type
   841 ;;                  1    wreg      void 
   842 ;; Registers used:
   843 ;;		None
   844 ;; Tracked objects:
   845 ;;		On entry : 0/0
   846 ;;		On exit  : 0/0
   847 ;;		Unchanged: 0/0
   848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   849 ;;      Params:         0       0       0       0       0
   850 ;;      Locals:         0       0       0       0       0
   851 ;;      Temps:          0       0       0       0       0
   852 ;;      Totals:         0       0       0       0       0
   853 ;;Total ram usage:        0 bytes
   854 ;; Hardware stack levels used: 1
   855 ;; This function calls:
   856 ;;		Nothing
   857 ;; This function is called by:
   858 ;;		_main
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862                           
   863                           ;psect for function _Sspi_Init
   864  0597                     _Sspi_Init:
   865  0597                     l943:	
   866                           ;incstack = 0
   867                           ; Regs used in _Sspi_Init: []
   868                           
   869                           
   870                           ;./SSPI.h: 55:     SSPEN = 1;
   871  0597  1283               	bcf	3,5	;RP0=0, select bank0
   872  0598  1303               	bcf	3,6	;RP1=0, select bank0
   873  0599  1694               	bsf	20,5	;volatile
   874                           
   875                           ;./SSPI.h: 56:     TRISCbits.TRISC3 = 0;
   876  059A  1683               	bsf	3,5	;RP0=1, select bank1
   877  059B  1303               	bcf	3,6	;RP1=0, select bank1
   878  059C  1187               	bcf	7,3	;volatile
   879                           
   880                           ;./SSPI.h: 57:     TRISCbits.TRISC4 = 1;
   881  059D  1607               	bsf	7,4	;volatile
   882                           
   883                           ;./SSPI.h: 58:     TRISCbits.TRISC5 = 0;
   884  059E  1287               	bcf	7,5	;volatile
   885  059F                     l45:
   886  059F  0008               	return
   887  05A0                     __end_of_Sspi_Init:
   888                           
   889                           	psect	text4
   890  0616                     __ptext4:	
   891 ;; *************** function _Sram_write *****************
   892 ;; Defined at:
   893 ;;		line 42 in file "TestingSSPI.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;  dato            1    wreg     unsigned char 
   896 ;;  address         2    0[COMMON] int 
   897 ;; Auto vars:     Size  Location     Type
   898 ;;  dato            1    3[COMMON] unsigned char 
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, status,2
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   908 ;;      Params:         2       0       0       0       0
   909 ;;      Locals:         1       0       0       0       0
   910 ;;      Temps:          1       0       0       0       0
   911 ;;      Totals:         4       0       0       0       0
   912 ;;Total ram usage:        4 bytes
   913 ;; Hardware stack levels used: 1
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_main
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           
   922                           ;psect for function _Sram_write
   923  0616                     _Sram_write:
   924                           
   925                           ;incstack = 0
   926                           ; Regs used in _Sram_write: [wreg+status,2]
   927                           ;Sram_write@dato stored from wreg
   928  0616  00F3               	movwf	Sram_write@dato
   929  0617                     l1039:
   930                           
   931                           ;TestingSSPI.c: 42: void Sram_write(char dato, int address);TestingSSPI.c: 43: {;Testing
      +                          SSPI.c: 47:       PORTCbits.RC0 = 0;
   932  0617  1283               	bcf	3,5	;RP0=0, select bank0
   933  0618  1303               	bcf	3,6	;RP1=0, select bank0
   934  0619  1007               	bcf	7,0	;volatile
   935  061A                     l1041:
   936                           
   937                           ;TestingSSPI.c: 48:      _delay((unsigned long)((10)*(20000000/4000000.0)));
   938  061A  3010               	movlw	16
   939  061B  00F2               	movwf	??_Sram_write
   940  061C                     u457:
   941  061C  0BF2               	decfsz	??_Sram_write,f
   942  061D  2E1C               	goto	u457
   943  061E  0000               	nop
   944                           
   945                           ;TestingSSPI.c: 49:       SSPBUF = 0x02;
   946  061F  3002               	movlw	2
   947  0620  1283               	bcf	3,5	;RP0=0, select bank0
   948  0621  1303               	bcf	3,6	;RP1=0, select bank0
   949  0622  0093               	movwf	19	;volatile
   950                           
   951                           ;TestingSSPI.c: 51:       _delay((unsigned long)((10)*(20000000/4000000.0)));
   952  0623  3010               	movlw	16
   953  0624  00F2               	movwf	??_Sram_write
   954  0625                     u467:
   955  0625  0BF2               	decfsz	??_Sram_write,f
   956  0626  2E25               	goto	u467
   957  0627  0000               	nop
   958  0628                     l1043:
   959                           
   960                           ;TestingSSPI.c: 52:         SSPBUF = (address>>8) & 0xFF;
   961  0628  0871               	movf	Sram_write@address+1,w
   962  0629  1283               	bcf	3,5	;RP0=0, select bank0
   963  062A  1303               	bcf	3,6	;RP1=0, select bank0
   964  062B  0093               	movwf	19	;volatile
   965  062C                     l1045:
   966                           
   967                           ;TestingSSPI.c: 53:       _delay((unsigned long)((10)*(20000000/4000000.0)));
   968  062C  3010               	movlw	16
   969  062D  00F2               	movwf	??_Sram_write
   970  062E                     u477:
   971  062E  0BF2               	decfsz	??_Sram_write,f
   972  062F  2E2E               	goto	u477
   973  0630  0000               	nop
   974  0631                     l1047:
   975                           
   976                           ;TestingSSPI.c: 54:        SSPBUF = address & 0xFF;
   977  0631  0870               	movf	Sram_write@address,w
   978  0632  1283               	bcf	3,5	;RP0=0, select bank0
   979  0633  1303               	bcf	3,6	;RP1=0, select bank0
   980  0634  0093               	movwf	19	;volatile
   981  0635                     l1049:
   982                           
   983                           ;TestingSSPI.c: 55:        _delay((unsigned long)((10)*(20000000/4000000.0)));
   984  0635  3010               	movlw	16
   985  0636  00F2               	movwf	??_Sram_write
   986  0637                     u487:
   987  0637  0BF2               	decfsz	??_Sram_write,f
   988  0638  2E37               	goto	u487
   989  0639  0000               	nop
   990  063A                     l1051:
   991                           
   992                           ;TestingSSPI.c: 56:        SSPBUF = dato;
   993  063A  0873               	movf	Sram_write@dato,w
   994  063B  1283               	bcf	3,5	;RP0=0, select bank0
   995  063C  1303               	bcf	3,6	;RP1=0, select bank0
   996  063D  0093               	movwf	19	;volatile
   997  063E                     l1053:
   998                           
   999                           ;TestingSSPI.c: 57:        _delay((unsigned long)((10)*(20000000/4000000.0)));
  1000  063E  3010               	movlw	16
  1001  063F  00F2               	movwf	??_Sram_write
  1002  0640                     u497:
  1003  0640  0BF2               	decfsz	??_Sram_write,f
  1004  0641  2E40               	goto	u497
  1005  0642  0000               	nop
  1006  0643                     l1055:
  1007                           
  1008                           ;TestingSSPI.c: 58:        PORTCbits.RC0 = 1;
  1009  0643  1283               	bcf	3,5	;RP0=0, select bank0
  1010  0644  1303               	bcf	3,6	;RP1=0, select bank0
  1011  0645  1407               	bsf	7,0	;volatile
  1012  0646                     l114:
  1013  0646  0008               	return
  1014  0647                     __end_of_Sram_write:
  1015                           
  1016                           	psect	text5
  1017  06CF                     __ptext5:	
  1018 ;; *************** function _SSpi_Clock_Source *****************
  1019 ;; Defined at:
  1020 ;;		line 64 in file "./SSPI.h"
  1021 ;; Parameters:    Size  Location     Type
  1022 ;;  value           2    0[COMMON] int 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;		None
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		wreg, status,2, status,0
  1029 ;; Tracked objects:
  1030 ;;		On entry : 0/0
  1031 ;;		On exit  : 0/0
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1034 ;;      Params:         2       0       0       0       0
  1035 ;;      Locals:         0       0       0       0       0
  1036 ;;      Temps:          0       0       0       0       0
  1037 ;;      Totals:         2       0       0       0       0
  1038 ;;Total ram usage:        2 bytes
  1039 ;; Hardware stack levels used: 1
  1040 ;; This function calls:
  1041 ;;		Nothing
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           
  1048                           ;psect for function _SSpi_Clock_Source
  1049  06CF                     _SSpi_Clock_Source:
  1050  06CF                     l945:	
  1051                           ;incstack = 0
  1052                           ; Regs used in _SSpi_Clock_Source: [wreg+status,2+status,0]
  1053                           
  1054                           
  1055                           ;./SSPI.h: 64: void SSpi_Clock_Source(int value);./SSPI.h: 66: {;./SSPI.h: 67:     if(va
      +                          lue==0)
  1056  06CF  0870               	movf	SSpi_Clock_Source@value,w
  1057  06D0  0471               	iorwf	SSpi_Clock_Source@value+1,w
  1058  06D1  1D03               	btfss	3,2
  1059  06D2  2ED4               	goto	u271
  1060  06D3  2ED5               	goto	u270
  1061  06D4                     u271:
  1062  06D4  2EDC               	goto	l949
  1063  06D5                     u270:
  1064  06D5                     l947:
  1065                           
  1066                           ;./SSPI.h: 68:     {;./SSPI.h: 70:     SSPM3 = 0;
  1067  06D5  1283               	bcf	3,5	;RP0=0, select bank0
  1068  06D6  1303               	bcf	3,6	;RP1=0, select bank0
  1069  06D7  1194               	bcf	20,3	;volatile
  1070                           
  1071                           ;./SSPI.h: 71:     SSPM2 = 0;
  1072  06D8  1114               	bcf	20,2	;volatile
  1073                           
  1074                           ;./SSPI.h: 72:     SSPM1 = 0;
  1075  06D9  1094               	bcf	20,1	;volatile
  1076                           
  1077                           ;./SSPI.h: 73:     SSPM0 = 0;
  1078  06DA  1014               	bcf	20,0	;volatile
  1079                           
  1080                           ;./SSPI.h: 74:     }
  1081  06DB  2F21               	goto	l59
  1082  06DC                     l949:
  1083  06DC  0370               	decf	SSpi_Clock_Source@value,w
  1084  06DD  0471               	iorwf	SSpi_Clock_Source@value+1,w
  1085  06DE  1D03               	btfss	3,2
  1086  06DF  2EE1               	goto	u281
  1087  06E0  2EE2               	goto	u280
  1088  06E1                     u281:
  1089  06E1  2EE9               	goto	l953
  1090  06E2                     u280:
  1091  06E2                     l951:
  1092                           
  1093                           ;./SSPI.h: 77:     {;./SSPI.h: 79:     SSPM3 = 0;
  1094  06E2  1283               	bcf	3,5	;RP0=0, select bank0
  1095  06E3  1303               	bcf	3,6	;RP1=0, select bank0
  1096  06E4  1194               	bcf	20,3	;volatile
  1097                           
  1098                           ;./SSPI.h: 80:     SSPM2 = 0;
  1099  06E5  1114               	bcf	20,2	;volatile
  1100                           
  1101                           ;./SSPI.h: 81:     SSPM1 = 0;
  1102  06E6  1094               	bcf	20,1	;volatile
  1103                           
  1104                           ;./SSPI.h: 82:     SSPM0 = 1;
  1105  06E7  1414               	bsf	20,0	;volatile
  1106                           
  1107                           ;./SSPI.h: 83:     }
  1108  06E8  2F21               	goto	l59
  1109  06E9                     l953:
  1110  06E9  3002               	movlw	2
  1111  06EA  0670               	xorwf	SSpi_Clock_Source@value,w
  1112  06EB  0471               	iorwf	SSpi_Clock_Source@value+1,w
  1113  06EC  1D03               	btfss	3,2
  1114  06ED  2EEF               	goto	u291
  1115  06EE  2EF0               	goto	u290
  1116  06EF                     u291:
  1117  06EF  2EF7               	goto	l957
  1118  06F0                     u290:
  1119  06F0                     l955:
  1120                           
  1121                           ;./SSPI.h: 86:     {;./SSPI.h: 88:     SSPM3 = 0;
  1122  06F0  1283               	bcf	3,5	;RP0=0, select bank0
  1123  06F1  1303               	bcf	3,6	;RP1=0, select bank0
  1124  06F2  1194               	bcf	20,3	;volatile
  1125                           
  1126                           ;./SSPI.h: 89:     SSPM2 = 0;
  1127  06F3  1114               	bcf	20,2	;volatile
  1128                           
  1129                           ;./SSPI.h: 90:     SSPM1 = 1;
  1130  06F4  1494               	bsf	20,1	;volatile
  1131                           
  1132                           ;./SSPI.h: 91:     SSPM0 = 0;
  1133  06F5  1014               	bcf	20,0	;volatile
  1134                           
  1135                           ;./SSPI.h: 92:     }
  1136  06F6  2F21               	goto	l59
  1137  06F7                     l957:
  1138  06F7  3003               	movlw	3
  1139  06F8  0670               	xorwf	SSpi_Clock_Source@value,w
  1140  06F9  0471               	iorwf	SSpi_Clock_Source@value+1,w
  1141  06FA  1D03               	btfss	3,2
  1142  06FB  2EFD               	goto	u301
  1143  06FC  2EFE               	goto	u300
  1144  06FD                     u301:
  1145  06FD  2F05               	goto	l961
  1146  06FE                     u300:
  1147  06FE                     l959:
  1148                           
  1149                           ;./SSPI.h: 95:     {;./SSPI.h: 97:     SSPM3 = 0;
  1150  06FE  1283               	bcf	3,5	;RP0=0, select bank0
  1151  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  1152  0700  1194               	bcf	20,3	;volatile
  1153                           
  1154                           ;./SSPI.h: 98:     SSPM2 = 0;
  1155  0701  1114               	bcf	20,2	;volatile
  1156                           
  1157                           ;./SSPI.h: 99:     SSPM1 = 1;
  1158  0702  1494               	bsf	20,1	;volatile
  1159                           
  1160                           ;./SSPI.h: 100:     SSPM0 = 1;
  1161  0703  1414               	bsf	20,0	;volatile
  1162                           
  1163                           ;./SSPI.h: 101:     }
  1164  0704  2F21               	goto	l59
  1165  0705                     l961:
  1166  0705  3004               	movlw	4
  1167  0706  0670               	xorwf	SSpi_Clock_Source@value,w
  1168  0707  0471               	iorwf	SSpi_Clock_Source@value+1,w
  1169  0708  1D03               	btfss	3,2
  1170  0709  2F0B               	goto	u311
  1171  070A  2F0C               	goto	u310
  1172  070B                     u311:
  1173  070B  2F13               	goto	l965
  1174  070C                     u310:
  1175  070C                     l963:
  1176                           
  1177                           ;./SSPI.h: 104:     {;./SSPI.h: 106:     SSPM3 = 0;
  1178  070C  1283               	bcf	3,5	;RP0=0, select bank0
  1179  070D  1303               	bcf	3,6	;RP1=0, select bank0
  1180  070E  1194               	bcf	20,3	;volatile
  1181                           
  1182                           ;./SSPI.h: 107:     SSPM2 = 1;
  1183  070F  1514               	bsf	20,2	;volatile
  1184                           
  1185                           ;./SSPI.h: 108:     SSPM1 = 0;
  1186  0710  1094               	bcf	20,1	;volatile
  1187                           
  1188                           ;./SSPI.h: 109:     SSPM0 = 0;
  1189  0711  1014               	bcf	20,0	;volatile
  1190                           
  1191                           ;./SSPI.h: 110:     }
  1192  0712  2F21               	goto	l59
  1193  0713                     l965:
  1194  0713  3005               	movlw	5
  1195  0714  0670               	xorwf	SSpi_Clock_Source@value,w
  1196  0715  0471               	iorwf	SSpi_Clock_Source@value+1,w
  1197  0716  1D03               	btfss	3,2
  1198  0717  2F19               	goto	u321
  1199  0718  2F1A               	goto	u320
  1200  0719                     u321:
  1201  0719  2F21               	goto	l53
  1202  071A                     u320:
  1203  071A                     l967:
  1204                           
  1205                           ;./SSPI.h: 113:     {;./SSPI.h: 115:     SSPM3 = 0;
  1206  071A  1283               	bcf	3,5	;RP0=0, select bank0
  1207  071B  1303               	bcf	3,6	;RP1=0, select bank0
  1208  071C  1194               	bcf	20,3	;volatile
  1209                           
  1210                           ;./SSPI.h: 116:     SSPM2 = 1;
  1211  071D  1514               	bsf	20,2	;volatile
  1212                           
  1213                           ;./SSPI.h: 117:     SSPM1 = 0;
  1214  071E  1094               	bcf	20,1	;volatile
  1215                           
  1216                           ;./SSPI.h: 118:     SSPM0 = 1;
  1217  071F  1414               	bsf	20,0	;volatile
  1218  0720  2F21               	goto	l59
  1219  0721                     l53:
  1220  0721                     l59:
  1221  0721  0008               	return
  1222  0722                     __end_of_SSpi_Clock_Source:
  1223                           
  1224                           	psect	text6
  1225  067D                     __ptext6:	
  1226 ;; *************** function _Lcd_Set_Cursor *****************
  1227 ;; Defined at:
  1228 ;;		line 41 in file "./lcd.h"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;  a               1    wreg     unsigned char 
  1231 ;;  b               1    4[COMMON] unsigned char 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  a               1    7[COMMON] unsigned char 
  1234 ;;  temp            1   10[COMMON] unsigned char 
  1235 ;;  y               1    9[COMMON] unsigned char 
  1236 ;;  z               1    8[COMMON] unsigned char 
  1237 ;; Return value:  Size  Location     Type
  1238 ;;                  1    wreg      void 
  1239 ;; Registers used:
  1240 ;;		wreg, status,2, status,0, pclath, cstack
  1241 ;; Tracked objects:
  1242 ;;		On entry : 0/0
  1243 ;;		On exit  : 0/0
  1244 ;;		Unchanged: 0/0
  1245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1246 ;;      Params:         1       0       0       0       0
  1247 ;;      Locals:         4       0       0       0       0
  1248 ;;      Temps:          2       0       0       0       0
  1249 ;;      Totals:         7       0       0       0       0
  1250 ;;Total ram usage:        7 bytes
  1251 ;; Hardware stack levels used: 1
  1252 ;; Hardware stack levels required when called: 2
  1253 ;; This function calls:
  1254 ;;		_Lcd_Cmd
  1255 ;; This function is called by:
  1256 ;;		_main
  1257 ;; This function uses a non-reentrant model
  1258 ;;
  1259                           
  1260                           
  1261                           ;psect for function _Lcd_Set_Cursor
  1262  067D                     _Lcd_Set_Cursor:
  1263                           
  1264                           ;incstack = 0
  1265                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1266                           ;Lcd_Set_Cursor@a stored from wreg
  1267  067D  00F7               	movwf	Lcd_Set_Cursor@a
  1268  067E                     l989:
  1269                           
  1270                           ;./lcd.h: 41: void Lcd_Set_Cursor(char a, char b);./lcd.h: 42: {;./lcd.h: 43:  char temp
      +                          ,z,y;;./lcd.h: 44:  if(a == 1)
  1271  067E  0377               	decf	Lcd_Set_Cursor@a,w
  1272  067F  1D03               	btfss	3,2
  1273  0680  2E82               	goto	u371
  1274  0681  2E83               	goto	u370
  1275  0682                     u371:
  1276  0682  2EA6               	goto	l999
  1277  0683                     u370:
  1278  0683                     l991:
  1279                           
  1280                           ;./lcd.h: 45:  {;./lcd.h: 46:    temp = 0x80 + b - 1;
  1281  0683  0874               	movf	Lcd_Set_Cursor@b,w
  1282  0684  3E7F               	addlw	127
  1283  0685  00F5               	movwf	??_Lcd_Set_Cursor
  1284  0686  0875               	movf	??_Lcd_Set_Cursor,w
  1285  0687  00FA               	movwf	Lcd_Set_Cursor@temp
  1286                           
  1287                           ;./lcd.h: 47:   z = temp>>4;
  1288  0688  087A               	movf	Lcd_Set_Cursor@temp,w
  1289  0689  00F5               	movwf	??_Lcd_Set_Cursor
  1290  068A  3004               	movlw	4
  1291  068B                     u385:
  1292  068B  1003               	clrc
  1293  068C  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1294  068D  3EFF               	addlw	-1
  1295  068E  1D03               	skipz
  1296  068F  2E8B               	goto	u385
  1297  0690  0875               	movf	??_Lcd_Set_Cursor,w
  1298  0691  00F6               	movwf	??_Lcd_Set_Cursor+1
  1299  0692  0876               	movf	??_Lcd_Set_Cursor+1,w
  1300  0693  00F8               	movwf	Lcd_Set_Cursor@z
  1301  0694                     l993:
  1302                           
  1303                           ;./lcd.h: 48:   y = temp & 0x0F;
  1304  0694  087A               	movf	Lcd_Set_Cursor@temp,w
  1305  0695  390F               	andlw	15
  1306  0696  00F5               	movwf	??_Lcd_Set_Cursor
  1307  0697  0875               	movf	??_Lcd_Set_Cursor,w
  1308  0698  00F9               	movwf	Lcd_Set_Cursor@y
  1309  0699                     l995:
  1310                           
  1311                           ;./lcd.h: 49:   Lcd_Cmd(z);
  1312  0699  0878               	movf	Lcd_Set_Cursor@z,w
  1313  069A  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1314  069F                     l997:
  1315                           
  1316                           ;./lcd.h: 50:   Lcd_Cmd(y);
  1317  069F  0879               	movf	Lcd_Set_Cursor@y,w
  1318  06A0  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1319                           
  1320                           ;./lcd.h: 51:  }
  1321  06A5  2ECE               	goto	l89
  1322  06A6                     l999:
  1323  06A6  3002               	movlw	2
  1324  06A7  0677               	xorwf	Lcd_Set_Cursor@a,w
  1325  06A8  1D03               	btfss	3,2
  1326  06A9  2EAB               	goto	u391
  1327  06AA  2EAC               	goto	u390
  1328  06AB                     u391:
  1329  06AB  2ECE               	goto	l89
  1330  06AC                     u390:
  1331  06AC                     l1001:
  1332                           
  1333                           ;./lcd.h: 53:  {;./lcd.h: 54:   temp = 0xC0 + b - 1;
  1334  06AC  0874               	movf	Lcd_Set_Cursor@b,w
  1335  06AD  3EBF               	addlw	191
  1336  06AE  00F5               	movwf	??_Lcd_Set_Cursor
  1337  06AF  0875               	movf	??_Lcd_Set_Cursor,w
  1338  06B0  00FA               	movwf	Lcd_Set_Cursor@temp
  1339                           
  1340                           ;./lcd.h: 55:   z = temp>>4;
  1341  06B1  087A               	movf	Lcd_Set_Cursor@temp,w
  1342  06B2  00F5               	movwf	??_Lcd_Set_Cursor
  1343  06B3  3004               	movlw	4
  1344  06B4                     u405:
  1345  06B4  1003               	clrc
  1346  06B5  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1347  06B6  3EFF               	addlw	-1
  1348  06B7  1D03               	skipz
  1349  06B8  2EB4               	goto	u405
  1350  06B9  0875               	movf	??_Lcd_Set_Cursor,w
  1351  06BA  00F6               	movwf	??_Lcd_Set_Cursor+1
  1352  06BB  0876               	movf	??_Lcd_Set_Cursor+1,w
  1353  06BC  00F8               	movwf	Lcd_Set_Cursor@z
  1354  06BD                     l1003:
  1355                           
  1356                           ;./lcd.h: 56:   y = temp & 0x0F;
  1357  06BD  087A               	movf	Lcd_Set_Cursor@temp,w
  1358  06BE  390F               	andlw	15
  1359  06BF  00F5               	movwf	??_Lcd_Set_Cursor
  1360  06C0  0875               	movf	??_Lcd_Set_Cursor,w
  1361  06C1  00F9               	movwf	Lcd_Set_Cursor@y
  1362  06C2                     l1005:
  1363                           
  1364                           ;./lcd.h: 57:   Lcd_Cmd(z);
  1365  06C2  0878               	movf	Lcd_Set_Cursor@z,w
  1366  06C3  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1367  06C8                     l1007:
  1368                           
  1369                           ;./lcd.h: 58:   Lcd_Cmd(y);
  1370  06C8  0879               	movf	Lcd_Set_Cursor@y,w
  1371  06C9  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1372  06CE                     l89:
  1373  06CE  0008               	return
  1374  06CF                     __end_of_Lcd_Set_Cursor:
  1375                           
  1376                           	psect	text7
  1377  0722                     __ptext7:	
  1378 ;; *************** function _Lcd_Init *****************
  1379 ;; Defined at:
  1380 ;;		line 62 in file "./lcd.h"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;		None
  1383 ;; Auto vars:     Size  Location     Type
  1384 ;;		None
  1385 ;; Return value:  Size  Location     Type
  1386 ;;                  1    wreg      void 
  1387 ;; Registers used:
  1388 ;;		wreg, status,2, status,0, pclath, cstack
  1389 ;; Tracked objects:
  1390 ;;		On entry : 0/0
  1391 ;;		On exit  : 0/0
  1392 ;;		Unchanged: 0/0
  1393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1394 ;;      Params:         0       0       0       0       0
  1395 ;;      Locals:         0       0       0       0       0
  1396 ;;      Temps:          2       0       0       0       0
  1397 ;;      Totals:         2       0       0       0       0
  1398 ;;Total ram usage:        2 bytes
  1399 ;; Hardware stack levels used: 1
  1400 ;; Hardware stack levels required when called: 2
  1401 ;; This function calls:
  1402 ;;		_Lcd_Cmd
  1403 ;;		_Lcd_Port
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409                           
  1410                           ;psect for function _Lcd_Init
  1411  0722                     _Lcd_Init:
  1412  0722                     l1009:	
  1413                           ;incstack = 0
  1414                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1415                           
  1416                           
  1417                           ;./lcd.h: 64:   Lcd_Port(0x00);
  1418  0722  3000               	movlw	0
  1419  0723  120A  118A  25C7  120A  118A  	fcall	_Lcd_Port
  1420  0728                     l1011:
  1421                           
  1422                           ;./lcd.h: 65:    _delay((unsigned long)((20)*(20000000/4000.0)));
  1423  0728  3082               	movlw	130
  1424  0729  00F5               	movwf	??_Lcd_Init+1
  1425  072A  30DD               	movlw	221
  1426  072B  00F4               	movwf	??_Lcd_Init
  1427  072C                     u507:
  1428  072C  0BF4               	decfsz	??_Lcd_Init,f
  1429  072D  2F2C               	goto	u507
  1430  072E  0BF5               	decfsz	??_Lcd_Init+1,f
  1431  072F  2F2C               	goto	u507
  1432  0730  2F31               	nop2
  1433  0731                     l1013:
  1434                           
  1435                           ;./lcd.h: 66:   Lcd_Cmd(0x03);
  1436  0731  3003               	movlw	3
  1437  0732  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1438                           
  1439                           ;./lcd.h: 67:  _delay((unsigned long)((5)*(20000000/4000.0)));
  1440  0737  3021               	movlw	33
  1441  0738  00F5               	movwf	??_Lcd_Init+1
  1442  0739  3076               	movlw	118
  1443  073A  00F4               	movwf	??_Lcd_Init
  1444  073B                     u517:
  1445  073B  0BF4               	decfsz	??_Lcd_Init,f
  1446  073C  2F3B               	goto	u517
  1447  073D  0BF5               	decfsz	??_Lcd_Init+1,f
  1448  073E  2F3B               	goto	u517
  1449  073F  0000               	nop
  1450  0740                     l1015:
  1451                           
  1452                           ;./lcd.h: 68:   Lcd_Cmd(0x03);
  1453  0740  3003               	movlw	3
  1454  0741  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1455  0746                     l1017:
  1456                           
  1457                           ;./lcd.h: 69:  _delay((unsigned long)((11)*(20000000/4000.0)));
  1458  0746  3048               	movlw	72
  1459  0747  00F5               	movwf	??_Lcd_Init+1
  1460  0748  306C               	movlw	108
  1461  0749  00F4               	movwf	??_Lcd_Init
  1462  074A                     u527:
  1463  074A  0BF4               	decfsz	??_Lcd_Init,f
  1464  074B  2F4A               	goto	u527
  1465  074C  0BF5               	decfsz	??_Lcd_Init+1,f
  1466  074D  2F4A               	goto	u527
  1467  074E  0000               	nop
  1468                           
  1469                           ;./lcd.h: 70:   Lcd_Cmd(0x03);
  1470  074F  3003               	movlw	3
  1471  0750  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1472                           
  1473                           ;./lcd.h: 72:   Lcd_Cmd(0x02);
  1474  0755  3002               	movlw	2
  1475  0756  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1476                           
  1477                           ;./lcd.h: 73:   Lcd_Cmd(0x02);
  1478  075B  3002               	movlw	2
  1479  075C  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1480                           
  1481                           ;./lcd.h: 74:   Lcd_Cmd(0x08);
  1482  0761  3008               	movlw	8
  1483  0762  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1484                           
  1485                           ;./lcd.h: 75:   Lcd_Cmd(0x00);
  1486  0767  3000               	movlw	0
  1487  0768  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1488                           
  1489                           ;./lcd.h: 76:   Lcd_Cmd(0x0C);
  1490  076D  300C               	movlw	12
  1491  076E  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1492                           
  1493                           ;./lcd.h: 77:   Lcd_Cmd(0x00);
  1494  0773  3000               	movlw	0
  1495  0774  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1496                           
  1497                           ;./lcd.h: 78:   Lcd_Cmd(0x06);
  1498  0779  3006               	movlw	6
  1499  077A  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1500  077F                     l92:
  1501  077F  0008               	return
  1502  0780                     __end_of_Lcd_Init:
  1503                           
  1504                           	psect	text8
  1505  05A0                     __ptext8:	
  1506 ;; *************** function _Lcd_Clear *****************
  1507 ;; Defined at:
  1508 ;;		line 35 in file "./lcd.h"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  2   82[None  ] int 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2, status,0, pclath, cstack
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1522 ;;      Params:         0       0       0       0       0
  1523 ;;      Locals:         0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0
  1525 ;;      Totals:         0       0       0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 2
  1529 ;; This function calls:
  1530 ;;		_Lcd_Cmd
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           
  1537                           ;psect for function _Lcd_Clear
  1538  05A0                     _Lcd_Clear:
  1539  05A0                     l987:	
  1540                           ;incstack = 0
  1541                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  1542                           
  1543                           
  1544                           ;./lcd.h: 37:  Lcd_Cmd(0);
  1545  05A0  3000               	movlw	0
  1546  05A1  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1547                           
  1548                           ;./lcd.h: 38:  Lcd_Cmd(1);
  1549  05A6  3001               	movlw	1
  1550  05A7  120A  118A  25AD  120A  118A  	fcall	_Lcd_Cmd
  1551  05AC                     l83:
  1552  05AC  0008               	return
  1553  05AD                     __end_of_Lcd_Clear:
  1554                           
  1555                           	psect	text9
  1556  05AD                     __ptext9:	
  1557 ;; *************** function _Lcd_Cmd *****************
  1558 ;; Defined at:
  1559 ;;		line 26 in file "./lcd.h"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  a               1    wreg     unsigned char 
  1562 ;; Auto vars:     Size  Location     Type
  1563 ;;  a               1    3[COMMON] unsigned char 
  1564 ;; Return value:  Size  Location     Type
  1565 ;;                  1    wreg      void 
  1566 ;; Registers used:
  1567 ;;		wreg, status,2, status,0, pclath, cstack
  1568 ;; Tracked objects:
  1569 ;;		On entry : 0/0
  1570 ;;		On exit  : 0/0
  1571 ;;		Unchanged: 0/0
  1572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1573 ;;      Params:         0       0       0       0       0
  1574 ;;      Locals:         1       0       0       0       0
  1575 ;;      Temps:          2       0       0       0       0
  1576 ;;      Totals:         3       0       0       0       0
  1577 ;;Total ram usage:        3 bytes
  1578 ;; Hardware stack levels used: 1
  1579 ;; Hardware stack levels required when called: 1
  1580 ;; This function calls:
  1581 ;;		_Lcd_Port
  1582 ;; This function is called by:
  1583 ;;		_Lcd_Clear
  1584 ;;		_Lcd_Set_Cursor
  1585 ;;		_Lcd_Init
  1586 ;;		_Lcd_Shift_Right
  1587 ;;		_Lcd_Shift_Left
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           
  1592                           ;psect for function _Lcd_Cmd
  1593  05AD                     _Lcd_Cmd:
  1594                           
  1595                           ;incstack = 0
  1596                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1597                           ;Lcd_Cmd@a stored from wreg
  1598  05AD  00F3               	movwf	Lcd_Cmd@a
  1599  05AE                     l933:
  1600                           
  1601                           ;./lcd.h: 26: void Lcd_Cmd(char a);./lcd.h: 27: {;./lcd.h: 28:  RD2 = 0;
  1602  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  1603  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  1604  05B0  1108               	bcf	8,2	;volatile
  1605  05B1                     l935:
  1606                           
  1607                           ;./lcd.h: 29:  Lcd_Port(a);
  1608  05B1  0873               	movf	Lcd_Cmd@a,w
  1609  05B2  120A  118A  25C7  120A  118A  	fcall	_Lcd_Port
  1610  05B7                     l937:
  1611                           
  1612                           ;./lcd.h: 30:  RD3 = 1;
  1613  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  1614  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  1615  05B9  1588               	bsf	8,3	;volatile
  1616  05BA                     l939:
  1617                           
  1618                           ;./lcd.h: 31:         _delay((unsigned long)((4)*(20000000/4000.0)));
  1619  05BA  301A               	movlw	26
  1620  05BB  00F2               	movwf	??_Lcd_Cmd+1
  1621  05BC  30F8               	movlw	248
  1622  05BD  00F1               	movwf	??_Lcd_Cmd
  1623  05BE                     u537:
  1624  05BE  0BF1               	decfsz	??_Lcd_Cmd,f
  1625  05BF  2DBE               	goto	u537
  1626  05C0  0BF2               	decfsz	??_Lcd_Cmd+1,f
  1627  05C1  2DBE               	goto	u537
  1628  05C2  0000               	nop
  1629  05C3                     l941:
  1630                           
  1631                           ;./lcd.h: 32:         RD3 = 0;
  1632  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1633  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1634  05C5  1188               	bcf	8,3	;volatile
  1635  05C6                     l80:
  1636  05C6  0008               	return
  1637  05C7                     __end_of_Lcd_Cmd:
  1638                           
  1639                           	psect	text10
  1640  05C7                     __ptext10:	
  1641 ;; *************** function _Lcd_Port *****************
  1642 ;; Defined at:
  1643 ;;		line 4 in file "./lcd.h"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  a               1    wreg     unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  a               1    0[COMMON] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1657 ;;      Params:         0       0       0       0       0
  1658 ;;      Locals:         1       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0
  1660 ;;      Totals:         1       0       0       0       0
  1661 ;;Total ram usage:        1 bytes
  1662 ;; Hardware stack levels used: 1
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_Lcd_Cmd
  1667 ;;		_Lcd_Init
  1668 ;;		_Lcd_Write_Char
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           
  1673                           ;psect for function _Lcd_Port
  1674  05C7                     _Lcd_Port:
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _Lcd_Port: [wreg]
  1678                           ;Lcd_Port@a stored from wreg
  1679  05C7  00F0               	movwf	Lcd_Port@a
  1680  05C8                     l923:
  1681                           
  1682                           ;./lcd.h: 4: void Lcd_Port(char a);./lcd.h: 5: {;./lcd.h: 6:  if(a & 1)
  1683  05C8  1C70               	btfss	Lcd_Port@a,0
  1684  05C9  2DCB               	goto	u231
  1685  05CA  2DCC               	goto	u230
  1686  05CB                     u231:
  1687  05CB  2DD0               	goto	l69
  1688  05CC                     u230:
  1689  05CC                     l925:
  1690                           
  1691                           ;./lcd.h: 7:   RD4 = 1;
  1692  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1693  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1694  05CE  1608               	bsf	8,4	;volatile
  1695  05CF  2DD3               	goto	l70
  1696  05D0                     l69:	
  1697                           ;./lcd.h: 8:  else
  1698                           
  1699                           
  1700                           ;./lcd.h: 9:   RD4 = 0;
  1701  05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1702  05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1703  05D2  1208               	bcf	8,4	;volatile
  1704  05D3                     l70:
  1705                           
  1706                           ;./lcd.h: 11:  if(a & 2)
  1707  05D3  1CF0               	btfss	Lcd_Port@a,1
  1708  05D4  2DD6               	goto	u241
  1709  05D5  2DD7               	goto	u240
  1710  05D6                     u241:
  1711  05D6  2DD9               	goto	l71
  1712  05D7                     u240:
  1713  05D7                     l927:
  1714                           
  1715                           ;./lcd.h: 12:   RD5 = 1;
  1716  05D7  1688               	bsf	8,5	;volatile
  1717  05D8  2DDA               	goto	l72
  1718  05D9                     l71:	
  1719                           ;./lcd.h: 13:  else
  1720                           
  1721                           
  1722                           ;./lcd.h: 14:   RD5 = 0;
  1723  05D9  1288               	bcf	8,5	;volatile
  1724  05DA                     l72:
  1725                           
  1726                           ;./lcd.h: 16:  if(a & 4)
  1727  05DA  1D70               	btfss	Lcd_Port@a,2
  1728  05DB  2DDD               	goto	u251
  1729  05DC  2DDE               	goto	u250
  1730  05DD                     u251:
  1731  05DD  2DE0               	goto	l73
  1732  05DE                     u250:
  1733  05DE                     l929:
  1734                           
  1735                           ;./lcd.h: 17:   RD6 = 1;
  1736  05DE  1708               	bsf	8,6	;volatile
  1737  05DF  2DE1               	goto	l74
  1738  05E0                     l73:	
  1739                           ;./lcd.h: 18:  else
  1740                           
  1741                           
  1742                           ;./lcd.h: 19:   RD6 = 0;
  1743  05E0  1308               	bcf	8,6	;volatile
  1744  05E1                     l74:
  1745                           
  1746                           ;./lcd.h: 21:  if(a & 8)
  1747  05E1  1DF0               	btfss	Lcd_Port@a,3
  1748  05E2  2DE4               	goto	u261
  1749  05E3  2DE5               	goto	u260
  1750  05E4                     u261:
  1751  05E4  2DE7               	goto	l75
  1752  05E5                     u260:
  1753  05E5                     l931:
  1754                           
  1755                           ;./lcd.h: 22:   RD7 = 1;
  1756  05E5  1788               	bsf	8,7	;volatile
  1757  05E6  2DE8               	goto	l77
  1758  05E7                     l75:	
  1759                           ;./lcd.h: 23:  else
  1760                           
  1761                           
  1762                           ;./lcd.h: 24:   RD7 = 0;
  1763  05E7  1388               	bcf	8,7	;volatile
  1764  05E8                     l77:
  1765  05E8  0008               	return
  1766  05E9                     __end_of_Lcd_Port:
  1767  007E                     btemp	set	126	;btemp
  1768  007E                     wtemp0	set	126
  1769                           
  1770                           	psect	config
  1771                           
  1772                           ;Config register CONFIG @ 0x2007
  1773                           ;	Oscillator Selection bits
  1774                           ;	FOSC = HS, HS oscillator
  1775                           ;	Watchdog Timer Enable bit
  1776                           ;	WDTE = OFF, WDT disabled
  1777                           ;	Power-up Timer Enable bit
  1778                           ;	PWRTE = OFF, PWRT disabled
  1779                           ;	Brown-out Reset Enable bit
  1780                           ;	BOREN = OFF, BOR disabled
  1781                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1782                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1783                           ;	Data EEPROM Memory Code Protection bit
  1784                           ;	CPD = OFF, Data EEPROM code protection off
  1785                           ;	Flash Program Memory Write Enable bits
  1786                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1787                           ;	In-Circuit Debugger Mode bit
  1788                           ;	DEBUG = 0x1, unprogrammed default
  1789                           ;	Flash Program Memory Code Protection bit
  1790                           ;	CP = OFF, Code protection off
  1791  2007                     	org	8199
  1792  2007  3F3A               	dw	16186

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80      4       6
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMMON[2]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    1635
                                             11 COMMON     1     1      0
                                              0 BANK0      4     4      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                  _SSpi_Clock_Source
                         _Sram_write
                          _Sspi_Init
                _Sspi_work_Cpol_Cpha
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18    15      3     243
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _Sspi_work_Cpol_Cpha                                  2     0      2     164
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Sspi_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Sram_write                                           4     2      2     142
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SSpi_Clock_Source                                    2     0      2     208
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     456
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _SSpi_Clock_Source
   _Sram_write
   _Sspi_Init
   _Sspi_work_Cpol_Cpha
   _sprintf

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      13       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       6       5        7.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      13      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Jun 21 20:23:50 2023

                           pc 0002                            l53 0721                            l45 059F  
                          l70 05D3                            l71 05D9                            l72 05DA  
                          l80 05C6                            l73 05E0                            l74 05E1  
                          l66 067C                            l75 05E7                            l83 05AC  
                          l59 0721                            l92 077F                            l77 05E8  
                          l69 05D0                            l89 06CE                            fsr 0004  
                         l114 0646                           l124 07F3                           l217 0615  
                         l931 05E5                           l923 05C8                           l925 05CC  
                         l941 05C3                           l933 05AE                           l927 05D7  
                         l935 05B1                           l951 06E2                           l943 0597  
                         _CKE 04A6                           l929 05DE                           l937 05B7  
                         l961 0705                           l953 06E9                           l945 06CF  
                         l939 05BA                           l963 070C                           l955 06F0  
                         l947 06D5                           l971 064A                           l965 0713  
                         l957 06F7                           l949 06DC                           l981 0669  
                         l973 0650                           l991 0683                           l967 071A  
                         l959 06FE                           l983 066F                           l975 0656  
                         l993 0694                           l985 0676                           l977 065C  
                         l969 0647                           _CKP 00A4                           l987 05A0  
                         l995 0699                           l979 0662                           l997 069F  
                         l989 067E                           l999 06A6                           _RD2 0042  
                         _RD3 0043                           _RD4 0044                           _RD5 0045  
                         _RD6 0046                           _RD7 0047                           u300 06FE  
                         u301 06FD                           u230 05CC                           u310 070C  
                         u231 05CB                           u311 070B                           u240 05D7  
                         u320 071A                           u241 05D6                           u321 0719  
                         u250 05DE                           u330 0650                           u251 05DD  
                         u331 064F                           u260 05E5                           u340 065C  
                         u420 060F                           u261 05E4                           u405 06B4  
                         u341 065B                           u421 060E                           u270 06D5  
                         u350 0669                           u271 06D4                           u351 0668  
                         u280 06E2                           u360 0676                           u440 07F3  
                         u281 06E1                           u361 0675                           u441 07F2  
                         u370 0683                           u290 06F0                           u507 072C  
                         u371 0682                           u291 06EF                           u517 073B  
                         u445 07EF                           u390 06AC                           u527 074A  
                         u391 06AB                           u537 05BE                           u385 068B  
                         u457 061C                           u467 0625                           u477 062E  
                         u487 0637                           u497 0640                           _SMP 04A7  
                         fsr0 0004                           indf 0000          ?_Sspi_work_Cpol_Cpha 0070  
                        l1001 06AC                          l1011 0728                          l1003 06BD  
                        l1013 0731                          l1005 06C2                          l1101 07B7  
                        l1015 0740                          l1007 06C8                          l1111 07CC  
                        l1103 07C3                          l1017 0746                          l1009 0722  
                        l1041 061A                          l1113 07D8                          l1105 07C8  
                        l1051 063A                          l1043 0628                          l1115 07E0  
                        l1053 063E                          l1045 062C                          l1061 05F7  
                        l1117 07E6                          l1055 0643                          l1047 0631  
                        l1039 0617                          l1063 05FD                          l1049 0635  
                        l1065 060F                          l1057 05E9                          l1081 0780  
                        l1059 05EE                          l1091 0795                          l1083 0784  
                        l1093 079D                          l1085 0787                          l1095 07A5  
                        l1087 078D                          l1097 07AA                          l1089 0790  
                        l1099 07AF                          STR_1 0009                          _data 007C  
                        _main 0780                          btemp 007E                          start 0000  
             __end_of_Lcd_Cmd 05C7                         ?_main 0070                         _SSPM0 00A0  
                       _SSPM1 00A1                         _SSPM2 00A2                         _SSPM3 00A3  
     __size_of_Lcd_Set_Cursor 0052                         _TRISD 0088                         _SSPEN 00A5  
       ??_Sspi_work_Cpol_Cpha 0072                         main@i 0022                         pclath 000A  
                       status 0003                         wtemp0 007E               __end_of_sprintf 0616  
            __end_of_Lcd_Init 0780              __end_of_Lcd_Port 05E9               __initialization 07F7  
                __end_of_main 07F7                        ??_main 007B            __size_of_Lcd_Clear 000D  
                   ??_Lcd_Cmd 0071                        _SSPBUF 0013                    _Sram_write 0616  
                   ??_sprintf 0073            __size_of_Sspi_Init 0009               Lcd_Set_Cursor@a 0077  
             Lcd_Set_Cursor@b 0074               Lcd_Set_Cursor@y 0079               Lcd_Set_Cursor@z 0078  
     __end_of__initialization 07FC             __end_of_Lcd_Clear 05AD                __pcstackCOMMON 0070  
              _Lcd_Set_Cursor 067D                     ?_Lcd_Init 0070                     ?_Lcd_Port 0070  
                  __pbssBANK0 0024                    __pmaintext 0780             __end_of_Sspi_Init 05A0  
      __end_of_Lcd_Set_Cursor 06CF                   ?_Sram_write 0070                    ??_Lcd_Init 0074  
                  ??_Lcd_Port 0070                    __stringtab 0003                       _Lcd_Cmd 05AD  
 __end_of_Sspi_work_Cpol_Cpha 067D               ?_Lcd_Set_Cursor 0074                       __ptext1 05E9  
                     __ptext2 0647                       __ptext3 0597                       __ptext4 0616  
                     __ptext5 06CF                       __ptext6 067D                       __ptext7 0722  
                     __ptext8 05A0                       __ptext9 05AD                       _lectura 0024  
                     _sprintf 05E9          end_of_initialization 07FC           __size_of_Sram_write 0031  
                   Lcd_Port@a 0070                     _PORTCbits 0007                     _PORTDbits 0008  
                   _TRISCbits 0087                     _Lcd_Clear 05A0           start_initialization 07F7  
           __size_of_Lcd_Init 005E             __size_of_Lcd_Port 0022       Sspi_work_Cpol_Cpha@mode 0070  
           _SSpi_Clock_Source 06CF            ?_SSpi_Clock_Source 0070                    ?_Lcd_Clear 0070  
         ??_SSpi_Clock_Source 0072                     _Sspi_Init 0597                  ??_Sram_write 0072  
                 __pbssCOMMON 007C                     ___latbits 0002                 __pcstackBANK0 0020  
   __end_of_SSpi_Clock_Source 0722                      ?_Lcd_Cmd 0070            __end_of_Sram_write 0647  
            ??_Lcd_Set_Cursor 0075                     __pstrings 0003                    ?_Sspi_Init 0070  
                    ?_sprintf 0070                Sram_write@dato 0073             Sram_write@address 0070  
                    Lcd_Cmd@a 0073                   ??_Lcd_Clear 0074                   __stringbase 0008  
__size_of_Sspi_work_Cpol_Cpha 0036                      _Lcd_Init 0722                      _Lcd_Port 05C7  
  __size_of_SSpi_Clock_Source 0053              __size_of_Lcd_Cmd 001A            __end_of__stringtab 0009  
                 ??_Sspi_Init 0070                      __ptext10 05C7              __size_of_sprintf 002D  
               __size_of_main 0077                      main@data 0020                     sprintf@ap 0074  
                   sprintf@sp 0070                     stringcode 0003            Lcd_Set_Cursor@temp 007A  
      SSpi_Clock_Source@value 0070                      sprintf@c 0075                      sprintf@f 0072  
                    stringdir 0003                      stringtab 0003           _Sspi_work_Cpol_Cpha 0647  
